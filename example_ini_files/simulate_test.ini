
[runtime]
sampler = test
root = ${CONDA_PREFIX}
; ${COSMOSIS_SRC_DIR}

[test]
save_dir=/net/home/fohlen13/dvornik/halo_model_mc/runs/test1/output
fatal-errors = T
fatal_errors = T

[DEFAULT]
nz_def = 10 ;6
nk_def = 300
zmin_def =  0.0
zmax_def = 0.9 ;1.2
nmass_def = 200 ;200
logmassmin_def = 10.0 ;12.0
logmassmax_def = 16.0 ;16.0
pipeline_path = /net/home/fohlen13/dvornik/halo_model_mc/halomodel_for_cosmosis/
data_path = /net/home/fohlen13/dvornik/halo_model_mc/halomodel_for_cosmosis/

[pipeline]
quiet=F
timing=T
debug=T
; modules = consistency camb hmf_and_halo_bias hod_red hod_blue red_centrals_alignment blue_centrals_alignment red_satellites_alignment blue_satellites_alignment nfw_halo radial_satellite_alignment_red radial_satellite_alignment_blue pk_red pk_blue add_red_and_blue_power
modules = consistency camb extrapolate hmf_and_halo_bias hod_red red_centrals_alignment red_satellites_alignment nfw_halo radial_satellite_alignment_red bnl pk_red add_red_and_blue_power
values = %(data_path)s/example_ini_files/values_test.ini
likelihoods =


[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py

[camb]
file = cosmosis-standard-library/boltzmann/camb/camb_interface.py
mode=all
lmax=5000
feedback=0
zmin= 0.
nonlinear=pk
halofit_version=mead2020 ;takahashi
kmin=1e-5
kmax=1000.0
nk=1000

[extrapolate]
file = cosmosis-standard-library/boltzmann/extrapolate/extrapolate_power.py
kmax = 1e8
nmax = 0 ; 2580

[hmf_and_halo_bias]
file = %(pipeline_path)s/hmf_and_hbf_tinker.py
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
zmin= %(zmin_def)s
zmax= %(zmax_def)s
nz= %(nz_def)s
hmf_model =  ST ;Tinker10
bias_model =  ST99 ;Tinker10
mdef_model =  SOVirial ;SOMean
overdensity = 200
delta_c = 1.686
cm_model =  bullock01 ;duffy08
; use_mead2020_corrections = mead2020_feedback

[hod_red]
file = %(pipeline_path)s/hod_interface.py
; if luminosities_z = True, then the luminosities are read from the luminosities_file [z_mid, lum_min(z), lum_max(z)]
observables_z = False
observables_file = %(data_path)s/input_files/red_cen_lum_pdf.txt
nobs = 200
; -
; obs_min, obs_max, zmin, zmax and nz are only needed if observables_z = False
; -
obs_min = 10.0,10.3,10.6
obs_max = 10.3,10.6,10.9
zmin = 0.0,0.1,0.2
zmax = 0.1,0.2,0.3
nz = %(nz_def)s
abs_mag_sun = 4.68
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
z_median = 0.4
do_hod = True
do_number_density = True
do_galaxy_linear_bias = True
do_observable_function = True
; options are: "obs_z" or "obs_zmed" depending if you want to calculate the LF per each redshift or on the median one
observable_mode = "obs_z"
do_cf_quantities = False
name = red

[hod_blue]
file = %(pipeline_path)s/hod_interface.py
; if luminosities_z = True, then the luminosities are read from the luminosities_file [z_mid, lum_min(z), lum_max(z)]
observables_z = True
observables_file = %(data_path)s/input_files/blue_cen_lum_pdf.txt
nobs = 200
; -
; obs_min, obs_max, zmin, zmax and nz are only needed if observables_z = False
; -
;obs_min = 4.698941e+08
;obs_max = 1.180321e+11
;zmin = %(zmin_def)s
;zmax = %(zmax_def)s
;nz = %(nz_def)s
abs_mag_sun = 4.68
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
z_median = 0.1
do_hod = True
do_number_density = True
do_galaxy_linear_bias = True
do_observable_function = True
; options are: "obs_z" or "obs_zmed" depending if you want to calculate the LF per each redshift or on the median one
observable_mode = "obs_zmed"
do_cf_quantities = False
name = blue

[nfw_halo]
file = %(pipeline_path)s/nfw_halo.py
zmin = %(zmin_def)s
zmax = %(zmax_def)s
nz = %(nz_def)s
nk = %(nk_def)s
profile = NFW ; AD: not yet implemented

[red_centrals_alignment]
file = %(pipeline_path)s/ia_amplitudes.py
galaxy_type = centrals
; if galaxy_type = centrals, then the choices are : 'None', 'Joachimi2011' (single power law), 'double_powerlaw'
luminosity_dependence='double_powerlaw'
z_loglum_file= %(data_path)s/input_files/redcen_lum.fits ; a fits file containing the columns 'z' and 'loglum'
zmin= %(zmin_def)s
zmax= %(zmax_def)s
nz = %(nz_def)s
name = red

[blue_centrals_alignment]
file = %(pipeline_path)s/ia_amplitudes.py
galaxy_type = centrals
luminosity_dependence='None'
zmin= %(zmin_def)s
zmax= %(zmax_def)s
nz = %(nz_def)s
name = blue

[red_satellites_alignment]
file = %(pipeline_path)s/ia_amplitudes.py
galaxy_type = satellites
; if galaxy_type = satellites, then the choices are : 'None', 'satellite_luminosity_dependence' (power law)
luminosity_dependence='satellite_luminosity_dependence'
z_loglum_file= %(data_path)s/input_files/redsat_lum.fits
zmin= %(zmin_def)s
zmax= %(zmax_def)s
nz = %(nz_def)s
name = red

[blue_satellites_alignment]
file = %(pipeline_path)s/ia_amplitudes.py
galaxy_type = satellites
luminosity_dependence='satellite_luminosity_dependence'
z_loglum_file= %(data_path)s/input_files/bluesat_lum.fits
zmin= %(zmin_def)s
zmax= %(zmax_def)s
nz = %(nz_def)s
name = blue

[radial_satellite_alignment_red]
file = %(pipeline_path)s/wkm_interp_interface_eps.py
zmin = %(zmin_def)s
zmax = %(zmax_def)s
nz = %(nz_def)s
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
kmin = 0.0001
kmax = 1000.
nk = 1000
name=red

[radial_satellite_alignment_blue]
file = %(pipeline_path)s/wkm_interp_interface_eps.py
zmin = %(zmin_def)s
zmax = %(zmax_def)s
nz = %(nz_def)s
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
kmin = 0.1
kmax = 1000.
nk = 1000
name=blue


[bnl]
file= %(pipeline_path)s/bnl_interface.py
;log-spaced mass in units of M_sun/h
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
zmin = %(zmin_def)s
zmax = %(zmax_def)s
nz = %(nz_def)s
nk = %(nk_def)s
bnl = False
interpolate_bnl = True
update_bnl = 10

[pk_red]
file= %(pipeline_path)s/pk_interface.py
;log-spaced mass in units of M_sun/h
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
zmin = %(zmin_def)s
zmax = %(zmax_def)s
nz = %(nz_def)s
nk = %(nk_def)s
pipeline = False
p_mm = True
p_mm_bnl = False
p_gg = True
p_gg_bnl = False
p_gm = True
p_gm_bnl = False
p_gI = False
p_mI = False
p_II = False
p_gI_bnl = False
p_mI_bnl = False
p_II_bnl = False
two_halo_only = False
hod_section_name = hod_red
name = red

[pk_blue]
file= %(pipeline_path)s/pk_interface.py
;log-spaced mass in units of M_sun/h
log_mass_min = %(logmassmin_def)s
log_mass_max = %(logmassmax_def)s
nmass = %(nmass_def)s
zmin = %(zmin_def)s
zmax = %(zmax_def)s
nz = %(nz_def)s
nk = %(nk_def)s
pipeline = False
p_mm = False
p_mm_bnl = True
p_gg = False
p_gg_bnl = False
p_gm = False
p_gm_bnl = False
p_gI = False
p_mI = False
p_II = False
p_gI_bnl = False
p_mI_bnl = False
p_II_bnl = False
two_halo_only = False
hod_section_name = hod_blue
name = blue

[add_red_and_blue_power]
file = %(pipeline_path)s/add_red_and_blue_power_spectra.py
f_red_file = %(data_path)s/input_files/f_red.txt ; two columns: z f_red(z)
; options below are False, extrapolate, add_and_extrapolate
do_p_mm = False
do_p_gg = extrapolate
do_p_gm = extrapolate
do_p_gI = False
do_p_mI = False
do_p_II = False
name_extrap = red
name_red = red
; name_blue = blue

